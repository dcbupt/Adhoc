MARSIPCGet	MarsOSAPI.c	/^MARS_IPC *MARSIPCGet(void){$/;"	f
MARSIPCMapRegist	MarsOSAPI.c	/^INT8U MARSIPCMapRegist(MARS_IPCMAP ipcmap, INT16U typejob){$/;"	f
MARSIPCPut	MarsOSAPI.c	/^void  MARSIPCPut(MARS_IPC *pipc){$/;"	f
MARSIPCRecv	MarsOSAPI.c	/^INT8U MARSIPCRecv(MARS_IPC **ppipc, INT16U timeout){$/;"	f
MARSIPCSend	MarsOSAPI.c	/^INT8U MARSIPCSend(MARS_IPC *pipc, INT16U timeout){$/;"	f
MARSInit	MarsOSAPI.c	/^void MARSInit(void){$/;"	f
MARSIntEnter	MarsOSAPI.c	/^void MARSIntEnter(void){$/;"	f
MARSIntExit	MarsOSAPI.c	/^void MARSIntExit(void){$/;"	f
MARSMemCreate	MarsOSAPI.c	/^MARS_MEM *MARSMemCreate(void *addr, INT32U nblks, INT32U blksize, INT8U *perr){$/;"	f
MARSMemGet	MarsOSAPI.c	/^void *MARSMemGet(MARS_MEM *pmem, INT8U *perr){$/;"	f
MARSMemNameGet	MarsOSAPI.c	/^INT8U MARSMemNameGet(MARS_MEM *pmem, INT8U *pname, INT8U *perr){$/;"	f
MARSMemNameSet	MarsOSAPI.c	/^void  MARSMemNameSet(MARS_MEM *pmem, INT8U *pname, INT8U *perr){$/;"	f
MARSMemPut	MarsOSAPI.c	/^INT8U MARSMemPut(MARS_MEM *pmem, void *pblk){$/;"	f
MARSMemQuery	MarsOSAPI.c	/^INT8U MARSMemQuery(MARS_MEM *pmem, MARS_MEM_DATA *p_mem_data){$/;"	f
MARSStart	MarsOSAPI.c	/^void MARSStart(void){$/;"	f
MARSStatInit	MarsOSAPI.c	/^void  MARSStatInit(void){$/;"	f
MARSTaskChangePrio	MarsOSAPI.c	/^INT8U MARSTaskChangePrio(INT8U oldprio, INT8U newprio){$/;"	f
MARSTaskCreate	MarsOSAPI.c	/^INT8U MARSTaskCreate(void(*task)(void *p_arg), void*p_arg, MARS_STK *ptos, INT8U prio, INT16U max_ipc){$/;"	f
MARSTaskCreateExt	MarsOSAPI.c	/^INT8U MARSTaskCreateExt(void(*task)(void *p_arg), void *p_arg, MARS_STK *ptos, INT8U prio, INT16U id, MARS_STK *pbos, INT32U stk_size, void *pext, INT16U max_ipc, INT16U opt){$/;"	f
MARSTaskDel	MarsOSAPI.c	/^INT8U MARSTaskDel(INT8U prio){$/;"	f
MARSTaskDelReq	MarsOSAPI.c	/^INT8U MARSTaskDelReq(INT8U prio){$/;"	f
MARSTaskNameGet	MarsOSAPI.c	/^INT8U MARSTaskNameGet(INT8U prio, INT8U *pname, INT8U *perr){$/;"	f
MARSTaskNameSet	MarsOSAPI.c	/^void  MARSTaskNameSet(INT8U prio, INT8U *panme, INT8U *perr) {$/;"	f
MARSTaskQuery	MarsOSAPI.c	/^INT8U MARSTaskQuery(INT8U prio, MARS_TCB *p_task_data){$/;"	f
MARSTaskResume	MarsOSAPI.c	/^INT8U MARSTaskResume(INT8U prio){$/;"	f
MARSTaskStkChk	MarsOSAPI.c	/^INT8U MARSTaskStkChk(INT8U prio, MARS_STK_DATA*p_stk_data){$/;"	f
MARSTaskSuspend	MarsOSAPI.c	/^INT8U MARSTaskSuspend(INT8U prio){$/;"	f
MARSTimeDly	MarsOSAPI.c	/^void  MARSTimeDly(INT16U ticks){$/;"	f
MARSTimeDlyHMSM	MarsOSAPI.c	/^INT8U MARSTimeDlyHMSM(INT8U hours, INT8U minutes, INT8U seconds, INT16U ms){$/;"	f
MARSTimeDlyResume	MarsOSAPI.c	/^INT8U MARSTimeDlyResume(INT8U prio){$/;"	f
MARSTimeGet	MarsOSAPI.c	/^INT32U MARSTimeGet(void){$/;"	f
MARSTimeSet	MarsOSAPI.c	/^void  MARSTimeSet(INT32U ticks){$/;"	f
prio_osevent	MarsOSAPI.c	/^static OS_EVENT* prio_osevent[OS_LOWEST_PRIO+1];$/;"	v	file:
MARSFree	MarsOSAPI.h	/^	INT32U MARSFree;$/;"	m	struct:MARS_stk_data
MARSIDRecv	MarsOSAPI.h	/^	INT32U MARSIDRecv;$/;"	m	struct:MARS_ipc
MARSIDSend	MarsOSAPI.h	/^	INT32U MARSIDSend;$/;"	m	struct:MARS_ipc
MARSMsgBuf	MarsOSAPI.h	/^	INT8U  MARSMsgBuf[MARS_IPC_SIZE];$/;"	m	struct:MARS_ipc
MARSMsgLen	MarsOSAPI.h	/^	INT16U MARSMsgLen;$/;"	m	struct:MARS_ipc
MARSOSAPI_H_	MarsOSAPI.h	2;"	d
MARSUsed	MarsOSAPI.h	/^	INT32U MARSUsed;$/;"	m	struct:MARS_stk_data
MARS_ENTER_CRITICAL	MarsOSAPI.h	70;"	d
MARS_ERR_IPC_TYPE_OVERFLOW	MarsOSAPI.h	8;"	d
MARS_ERR_NONE	MarsOSAPI.h	7;"	d
MARS_EXIT_CRITICAL	MarsOSAPI.h	71;"	d
MARS_IPC	MarsOSAPI.h	/^}MARS_IPC;$/;"	t	typeref:struct:MARS_ipc
MARS_IPCMAP	MarsOSAPI.h	/^typedef INT8U(*MARS_IPCMAP)(MARS_IPC*);$/;"	t
MARS_IPC_SIZE	MarsOSAPI.h	33;"	d
MARS_MEM	MarsOSAPI.h	59;"	d
MARS_MEM_DATA	MarsOSAPI.h	60;"	d
MARS_RealPriMARSend	MarsOSAPI.h	/^	INT8U  MARS_RealPriMARSend;$/;"	m	struct:MARS_ipc
MARS_RealPrioRecv	MarsOSAPI.h	/^	INT8U  MARS_RealPrioRecv;$/;"	m	struct:MARS_ipc
MARS_STK	MarsOSAPI.h	11;"	d
MARS_STK_DATA	MarsOSAPI.h	/^}MARS_STK_DATA;$/;"	t	typeref:struct:MARS_stk_data
MARS_TCB	MarsOSAPI.h	12;"	d
MARS_ipc	MarsOSAPI.h	/^typedef struct MARS_ipc{$/;"	s
MARS_stk_data	MarsOSAPI.h	/^typedef struct MARS_stk_data{$/;"	s
AckTimeUpEvent	event_type.h	13;"	d
App2NetEvent	event_type.h	4;"	d
DataTimeUpEvent	event_type.h	12;"	d
EVENT_TYPE_H	event_type.h	2;"	d
InitTimerEvent	event_type.h	9;"	d
Phy2MacOnNarrowEvent	event_type.h	6;"	d
Phy2MacOnWideEvent	event_type.h	5;"	d
SetLinkEvent	event_type.h	11;"	d
SetNarrowBeamEvent	event_type.h	8;"	d
SetWideBeamEvent	event_type.h	7;"	d
TimeUpEvent	event_type.h	10;"	d
THIS_NODE	init_node.c	/^INT32U THIS_NODE;$/;"	v
init_Node	init_node.c	/^void init_Node(){$/;"	f
add_elem	list.c	/^INT8U add_elem(list *mlist, INT8U elem) {$/;"	f
get_idx_of_elem	list.c	/^INT8U get_idx_of_elem(list *mlist, INT8U index) {$/;"	f
init_list	list.c	/^void init_list(list *mlist) {$/;"	f
is_list_empty	list.c	/^INT8U is_list_empty(list *mlist) {$/;"	f
list_size	list.c	/^INT8U list_size(list *mlist) {$/;"	f
remove_elem	list.c	/^void remove_elem(list *mlist, INT8U elem){$/;"	f
LIST_IS_EMPTY	list.h	13;"	d
LIST_NOT_EMPTY	list.h	14;"	d
LIST_OP_FAILED	list.h	10;"	d
LIST_OP_SUCCESS	list.h	11;"	d
MAX_LIST_SIZE	list.h	8;"	d
_H_LIST_H_	list.h	2;"	d
list	list.h	/^typedef struct list {$/;"	s
list	list.h	/^} list;$/;"	t	typeref:struct:list
m_list	list.h	/^	INT8U m_list[MAX_LIST_SIZE];$/;"	m	struct:list
m_size	list.h	/^	INT8U m_size;$/;"	m	struct:list
PrintfLog	log.c	/^void PrintfLog(int level,char * fromat, ...){$/;"	f
out	log.c	/^FILE* out;$/;"	v
LOG_DEBUG	log.h	9;"	d
LOG_EN	log.h	5;"	d
LOG_ERROR	log.h	7;"	d
LOG_INFO	log.h	8;"	d
LOG_LEVEL	log.h	6;"	d
MLOG_H_	log.h	2;"	d
get_from_lvds	lvds.c	/^/;"	f
handle_lvds_data	lvds.c	/^/;"	f
lvds_has_data	lvds.c	/^/;"	f
send_to_lvds	lvds.c	/^/;"	f
LVDS_H_	lvds.h	2;"	d
Max_LVDS_LEN	lvds.h	6;"	d
all_in_wide_beam	mac_help.c	/^BOOLEAN all_in_wide_beam()$/;"	f
current_time	mac_help.c	/^INT32U current_time;$/;"	v
generate_ack_normal_msg	mac_help.c	/^INT8U generate_ack_normal_msg()$/;"	f
generate_ack_overflow_msg	mac_help.c	/^INT8U generate_ack_overflow_msg()$/;"	f
generate_cts_msg	mac_help.c	/^INT8U generate_cts_msg()$/;"	f
generate_end_msg	mac_help.c	/^INT8U generate_end_msg()$/;"	f
generate_link_set	mac_help.c	/^void generate_link_set(INT8U* command, INT8U len, INT8U antenna, INT8U link_mode)$/;"	f
generate_narrow_set	mac_help.c	/^void generate_narrow_set(INT8U* command, INT8U len, INT8U antenna, INT8U to_node)$/;"	f
generate_node_msg	mac_help.c	/^void generate_node_msg(INT8U* packet, INT8U rts, INT8U recv_node)$/;"	f
generate_wide_set	mac_help.c	/^void generate_wide_set(INT8U* command, INT8U len, INT8U antenna)$/;"	f
get_antenna_index	mac_help.c	/^int get_antenna_index(INT8U antenna_id)$/;"	f
get_move_info	mac_help.c	/^void get_move_info(move_info* move)$/;"	f
get_speed_info	mac_help.c	/^void get_speed_info(speed_info* speed)$/;"	f
node_move	mac_help.c	/^move_info node_move[NUM_OF_NODES];$/;"	v
node_speed	mac_help.c	/^speed_info node_speed[NUM_OF_NODES];$/;"	v
node_time	mac_help.c	/^INT32U node_time[NUM_OF_NODES];$/;"	v
printStringByte	mac_help.c	/^void printStringByte(INT8U* s, INT32U len)$/;"	f
print_connect_matrix	mac_help.c	/^void print_connect_matrix()$/;"	f
print_neighbor_node	mac_help.c	/^void print_neighbor_node()$/;"	f
print_node_move	mac_help.c	/^void print_node_move()$/;"	f
send_on_narrow_beam	mac_help.c	/^void send_on_narrow_beam(INT8U* pkt, INT32U pkt_len, INT8U from_antenna, INT8U send_mode){$/;"	f
send_on_wide_beam	mac_help.c	/^void send_on_wide_beam(INT8U* node_msg, INT8U msg_len, INT8U from_antenna, INT8U send_mode){$/;"	f
set_all_antenna_wide	mac_help.c	/^void set_all_antenna_wide()$/;"	f
set_link	mac_help.c	/^void set_link(INT8U* command, INT32U command_len){$/;"	f
set_narrow_beam	mac_help.c	/^void set_narrow_beam(INT8U* command, INT32U command_len){$/;"	f
set_wide_beam	mac_help.c	/^void set_wide_beam(INT8U* command, INT32U command_len){$/;"	f
time_up	mac_help.c	/^INT8U time_up[NUM_OF_NODES];$/;"	v
variable_initialize	mac_help.c	/^void variable_initialize()$/;"	f
ACK_NORMAL_TYPE	mac_help.h	38;"	d
ACK_OVERFLOW_TYPE	mac_help.h	39;"	d
BACK_ANTENNA	mac_help.h	20;"	d
CTS_TYPE	mac_help.h	40;"	d
DATA_TYPE	mac_help.h	36;"	d
DIRECT_SEND	mac_help.h	23;"	d
END_TYPE	mac_help.h	37;"	d
FORWARD_ANTENNA	mac_help.h	17;"	d
INRP_SEND	mac_help.h	24;"	d
LEFT_ANTENNA	mac_help.h	19;"	d
MAC_HELP_H	mac_help.h	2;"	d
NARROW_BEAM_MSG_SEND_TYPE	mac_help.h	33;"	d
NODE_MSG_SIZE	mac_help.h	10;"	d
RIGHT_ANTENNA	mac_help.h	18;"	d
SET_LINK_TYPE	mac_help.h	46;"	d
SET_NARROW_BEAM_TYPE	mac_help.h	45;"	d
SET_WIDE_BEAM_TYPE	mac_help.h	44;"	d
Set_Wide_Beam_Length	mac_help.h	13;"	d
WIDE_BEAM_MSG_SEND_TYPE	mac_help.h	30;"	d
ackTimeUp_Process	mac_laye.c	/^/;"	f
connect_matrix_changed	mac_laye.c	/^/;"	v
cts_antenna	mac_laye.c	/^/;"	v
cts_flag	mac_laye.c	/^/;"	v
current_narrow_antenna	mac_laye.c	/^/;"	v
current_next_node	mac_laye.c	/^/;"	v
dataTimeUp_Process	mac_laye.c	/^/;"	f
end_send	mac_laye.c	/^/;"	v
neighbor_node	mac_laye.c	/^/;"	v
node_antenna_state	mac_laye.c	/^/;"	v
quit_connect_matrix	mac_laye.c	/^/;"	f
read_narrowBeam_msg	mac_laye.c	/^/;"	f
read_node_msg	mac_laye.c	/^/;"	f
read_setLinkRsp	mac_laye.c	/^/;"	f
read_setNarrowBeamRsp	mac_laye.c	/^/;"	f
read_setWideBeamRsp	mac_laye.c	/^/;"	f
resend_data_num	mac_laye.c	/^/;"	v
rts_flag	mac_laye.c	/^/;"	v
send_buf_packet	mac_laye.c	/^/;"	f
send_node_msg	mac_laye.c	/^/;"	f
set_node_msg_timer	mac_laye.c	/^/;"	f
waitACK_flag	mac_laye.c	/^/;"	v
MAC_LAYER_H	mac_laye.h	2;"	d
AppLayer	main.c	/^static void AppLayer(void *pParam){$/;"	f	file:
App_Layer_Stk	main.c	/^static MARS_STK        App_Layer_Stk[TASK_STK_SIZE];$/;"	v	file:
Protocol	main.c	/^static void Protocol(void *pParam){$/;"	f	file:
Protocol_Stk	main.c	/^static MARS_STK        Protocol_Stk[TASK_STK_SIZE];$/;"	v	file:
Recv_Data_From_LVDS	main.c	/^static void Recv_Data_From_LVDS(){$/;"	f	file:
Recv_Data_From_LVDS_STK	main.c	/^static MARS_STK        Recv_Data_From_LVDS_STK[TASK_STK_SIZE];$/;"	v	file:
TASK_STK_SIZE	main.c	33;"	d	file:
main	main.c	/^void main(void)$/;"	f
BufferInfo	mem_man.c	/^/;"	v
BufferInfoMem	mem_man.c	/^/;"	v
Datapackage	mem_man.c	/^/;"	v
DatapackageMem	mem_man.c	/^/;"	v
SmallAmoutOfData	mem_man.c	/^/;"	v
SmallAmoutOfDataMem	mem_man.c	/^/;"	v
init_BufferInfoMem	mem_man.c	/^/;"	f
init_DatapackageMem	mem_man.c	/^/;"	f
init_Mem	mem_man.c	/^/;"	f
init_SmallAmountOfDataMem	mem_man.c	/^/;"	f
mem_Free	mem_man.c	/^/;"	f
mem_Malloc	mem_man.c	/^/;"	f
BufferInfoCount	mem_man.h	9;"	d
BufferInfoLen	mem_man.h	10;"	d
BufferInfoMemType	mem_man.h	16;"	d
DatapackageCount	mem_man.h	6;"	d
DatapackageLen	mem_man.h	7;"	d
DatapackageMemType	mem_man.h	15;"	d
MEMMAN_H	mem_man.h	2;"	d
SmallAmountOfDataCount	mem_man.h	12;"	d
SmallAmountOfDataLen	mem_man.h	13;"	d
SmallAmoutOfDataMemType	mem_man.h	17;"	d
sendMessageToProtocol	mes_queue.c	/^/;"	f
MESQUEUE_H_	mes_queue.h	2;"	d
Protocol_Message	mes_queue.h	/^/;"	s
Protocol_Message	mes_queue.h	/^/;"	t	typeref:struct:Protocol_Message
Protocol_Prio	mes_queue.h	6;"	d
data	mes_queue.h	/^/;"	m	struct:Protocol_Message
desID	mes_queue.h	/^/;"	m	struct:Protocol_Message
len	mes_queue.h	/^/;"	m	struct:Protocol_Message
memType	mes_queue.h	/^/;"	m	struct:Protocol_Message
mesType	mes_queue.h	/^/;"	m	struct:Protocol_Message
DEBUG_NET	network.c	24;"	d	file:
blocked_queue_flag	network.c	/^INT8U blocked_queue_flag;			\/\/������������0���$/;"	v
computeRouteTable	network.c	/^void computeRouteTable() {$/;"	f
computeRouteTableWithoutLET	network.c	/^void computeRouteTableWithoutLET() {$/;"	f
connect_matrix	network.c	/^connect_info_t  connect_matrix[NUM_OF_NODES][NUM_OF_NODES];		\/\/ȫ����ͨ���"	v
getNodeAddr	network.c	/^INT8U getNodeAddr() {$/;"	f
packetProcess	network.c	/^void packetProcess(INT8U destID, void* point2packet, INT32U length) {$/;"	f
packet_buffer_queue	network.c	/^packet_queue packet_buffer_queue;		\/\/ȫ�ֵ������$/;"	v
receiveFromMac	network.c	/^void receiveFromMac(void *point2packet, INT32U length) {$/;"	f
rt_table	network.c	/^route_table_map  rt_table;			\/\/ȫ������;"	v
send_to_app	network.c	/^void send_to_app(void *point2packet, INT32U length) {$/;"	f
DOUBLE_INFINITY	network.h	11;"	d
NUM_OF_NODES	network.h	8;"	d
Netlayer_Hdr	network.h	/^typedef struct Netlayer_Hdr {$/;"	s
OFFSET_TO_NETLAYER	network.h	13;"	d
TTL	network.h	/^	INT8U  TTL;					\/\/��ݰ����Time_To_Live�����ƣ�$/;"	m	struct:Netlayer_Hdr
UNDEFINED	network.h	10;"	d
_NETWORK_LAYER_H_	network.h	2;"	d
dataLength	network.h	/^	INT16U dataLength;			\/\/��ݶεĳ���/;"	m	struct:Netlayer_Hdr
dest_ID	network.h	/^	INT8U dest_ID;				\/\/Ŀ��ַ$/;"	m	struct:Netlayer_Hdr
netlayer_hdr	network.h	/^} netlayer_hdr;$/;"	t	typeref:struct:Netlayer_Hdr
padding	network.h	/^	INT8U  padding;				\/\/���λ$/;"	m	struct:Netlayer_Hdr
source_ID	network.h	/^	INT8U source_ID;			\/\/Դ���$/;"	m	struct:Netlayer_Hdr
dequeue	packetBuffer.c	/^packet* dequeue(packet_queue *queue) {$/;"	f
enqueue	packetBuffer.c	/^void enqueue(packet_queue *queue, packet *data) {$/;"	f
init_packet_queue	packetBuffer.c	/^void init_packet_queue(packet_queue *queue, INT16U capacity, FP64 blocked_factor, FP64 clear_factor) {$/;"	f
is_blocked	packetBuffer.c	/^INT8U is_blocked(packet_queue *queue) {$/;"	f
is_clear_blocked_flag	packetBuffer.c	/^INT8U is_clear_blocked_flag(packet_queue *queue) {$/;"	f
is_empty	packetBuffer.c	/^INT8U is_empty(packet_queue *queue) {$/;"	f
is_full	packetBuffer.c	/^INT8U is_full(packet_queue *queue) {$/;"	f
queue_size	packetBuffer.c	/^INT16U queue_size(packet_queue *queue) {$/;"	f
read_head	packetBuffer.c	/^packet* read_head(packet_queue *queue) {$/;"	f
BLOCKED	packetBuffer.h	16;"	d
EMPTY	packetBuffer.h	13;"	d
FULL_QUEUE	packetBuffer.h	10;"	d
MAX_BUFFER_SIZE	packetBuffer.h	7;"	d
NOT_BLOCKED	packetBuffer.h	17;"	d
NOT_EMPTY	packetBuffer.h	14;"	d
NOT_FULL_QUEUE	packetBuffer.h	11;"	d
_H_PACKET_BUFFER_H_	packetBuffer.h	2;"	d
data	packetBuffer.h	/^	INT8U *data;			\/\/��ݰ��ָ�$/;"	m	struct:packet
data_length	packetBuffer.h	/^	INT16U data_length;		\/\/��ݰ��/;"	m	struct:packet
head	packetBuffer.h	/^	packet* head;			\/\/ͷ��$/;"	m	struct:packet_queue
m_blocked_factor	packetBuffer.h	/^	FP64 m_blocked_factor;	\/\/�����ķ�ֵ����ratio=��ǰ��/������$/;"	m	struct:packet_queue
m_capacity	packetBuffer.h	/^	INT16U m_capacity;		\/\/������$/;"	m	struct:packet_queue
m_clear_factor	packetBuffer.h	/^	FP64 m_clear_factor;	\/\/�������ķ�ֵ����ratio=��ǰ��/������$/;"	m	struct:packet_queue
m_size	packetBuffer.h	/^	INT16U m_size;			\/\/��е�ǰ��/;"	m	struct:packet_queue
next	packetBuffer.h	/^	struct packet* next;	\/\/ָ��һ�ڵ�ָ�$/;"	m	struct:packet	typeref:struct:packet::packet
nextID	packetBuffer.h	/^	INT8U nextID;			\/\/����������$/;"	m	struct:packet
packet	packetBuffer.h	/^typedef struct packet {$/;"	s
packet	packetBuffer.h	/^} packet;$/;"	t	typeref:struct:packet
packet_queue	packetBuffer.h	/^typedef struct packet_queue {$/;"	s
packet_queue	packetBuffer.h	/^} packet_queue;$/;"	t	typeref:struct:packet_queue
tail	packetBuffer.h	/^	packet* tail;			\/\/β�ڵ�;"	m	struct:packet_queue
getNodeInfo	publicstorage.c	/^NodeInfo getNodeInfo(int no){$/;"	f
kNodesInfo	publicstorage.c	/^NodeInfo kNodesInfo[NUM_OF_NODES];$/;"	v
updateNodeInfo	publicstorage.c	/^void updateNodeInfo(INT8U no,FP32 x,FP32 y,FP32 z,INT16U x_speed,INT16U y_speed,INT16U z_speed,INT16U time){$/;"	f
NodeInfo	publicstorage.h	/^}NodeInfo;$/;"	t	typeref:struct:nodeInfo
PUBLICSTORAGE_H_	publicstorage.h	2;"	d
nodeInfo	publicstorage.h	/^typedef struct nodeInfo{$/;"	s
time	publicstorage.h	/^	INT16U time;$/;"	m	struct:nodeInfo
x	publicstorage.h	/^	FP32 x;$/;"	m	struct:nodeInfo
x_speed	publicstorage.h	/^	INT16U x_speed;$/;"	m	struct:nodeInfo
y	publicstorage.h	/^	FP32 y;$/;"	m	struct:nodeInfo
y_speed	publicstorage.h	/^	INT16U y_speed;$/;"	m	struct:nodeInfo
z	publicstorage.h	/^	FP32 z;$/;"	m	struct:nodeInfo
z_speed	publicstorage.h	/^	INT16U z_speed;$/;"	m	struct:nodeInfo
add_entry	routeTable.c	/^int add_entry(route_table_map *table, rt_entry *new_entry){$/;"	f
clear_table	routeTable.c	/^void clear_table(route_table_map *table) {$/;"	f
find_entry	routeTable.c	/^rt_entry* find_entry(route_table_map *table, INT8U destID) {$/;"	f
find_send_entry	routeTable.c	/^rt_entry* find_send_entry(route_table_map *table, INT8U destID) {$/;"	f
init_route_table	routeTable.c	/^void init_route_table(route_table_map *table) {$/;"	f
remove_entry	routeTable.c	/^void remove_entry(route_table_map *table, INT8U destID){$/;"	f
LET	routeTable.h	/^	FP64  LET;					\/\/�·LETֵ$/;"	m	struct:rt_entry
MAX_ROUTE_TABLE_SIZE	routeTable.h	10;"	d
_H_ROUTE_TABLE_H	routeTable.h	2;"	d
destID	routeTable.h	/^	INT8U  destID;					\/\/Ŀ�����$/;"	m	struct:rt_entry
hops	routeTable.h	/^	INT8U  hops;					\/\/���$/;"	m	struct:rt_entry
m_isExisted	routeTable.h	/^	INT8U m_isExisted[MAX_ROUTE_TABLE_SIZE];	\/\/��������ڱ�,1-->����0����$/;"	m	struct:route_table_map
m_size	routeTable.h	/^	INT8U m_size;								\/\/��ǰ·�����/;"	m	struct:route_table_map
m_table	routeTable.h	/^	rt_entry m_table[MAX_ROUTE_TABLE_SIZE];		\/\/·����Ĵ洢��±���stID, Ŀ��ַIP$/;"	m	struct:route_table_map
nextID	routeTable.h	/^	INT8U  nextID;					\/\/�һ�IP���$/;"	m	struct:rt_entry
route_table_map	routeTable.h	/^typedef struct route_table_map {$/;"	s
route_table_map	routeTable.h	/^} route_table_map;$/;"	t	typeref:struct:route_table_map
rt_entry	routeTable.h	/^typedef struct rt_entry {$/;"	s
rt_entry	routeTable.h	/^} rt_entry;$/;"	t	typeref:struct:rt_entry
appSendData	send_mes.c	/^/;"	f
NetAndMacHeaderLen	send_mes.h	4;"	d
SEND_MES_H	send_mes.h	2;"	d
TIMER_CON	timer.c	/^/;"	v
TIMER_UESD	timer.c	/^/;"	v
Timer_Stk	timer.c	/^/;"	v
cancle_timer	timer.c	/^/;"	f
new_timer	timer.c	/^/;"	f
set_timer	timer.c	/^/;"	f
Ack_Time	timer.h	11;"	d
Data_Time	timer.h	10;"	d
Neighbour_Time	timer.h	9;"	d
TASK_STK_SIZE	timer.h	5;"	d
TIMER_H	timer.h	2;"	d
TIMER_INFO	timer.h	/^}TIMER_INFO;$/;"	t	typeref:struct:Timer_Info
TIMER_NUMBER	timer.h	6;"	d
Timer_Info	timer.h	/^typedef struct Timer_Info{$/;"	s
WideBeam_Time	timer.h	8;"	d
no	timer.h	/^	INT8U no;$/;"	m	struct:Timer_Info
prior	timer.h	/^	INT8U prior;$/;"	m	struct:Timer_Info
time	timer.h	/^	INT16U time;$/;"	m	struct:Timer_Info
Antenna_State	vardef.h	/^/;"	s
BACK_ANTENNA	vardef.h	36;"	d
CONN_MATRIX_CHANGED	vardef.h	41;"	d
CONN_MATRIX_UNCHANGED	vardef.h	42;"	d
CUR_ANTENNA_DEFAULT	vardef.h	37;"	d
Connect_Info	vardef.h	/^/;"	s
Connect_Info_T	vardef.h	/^/;"	s
FRONT_ANTENNA	vardef.h	33;"	d
INITIALIZE_CONN_ANTENNA	vardef.h	46;"	d
LEFT_ANTENNA	vardef.h	34;"	d
MODE_DEFAULT	vardef.h	23;"	d
Move_Info	vardef.h	/^/;"	s
NARROW_BEAM	vardef.h	16;"	d
NARROW_BEAM_RECV_MODE	vardef.h	28;"	d
NARROW_BEAM_RECV_SET_MODE	vardef.h	27;"	d
NARROW_BEAM_SEND_BEFORE_MODE	vardef.h	25;"	d
NARROW_BEAM_SEND_MODE	vardef.h	26;"	d
NARROW_BEAM_SET_LINK	vardef.h	29;"	d
NARROW_BEAM_SET_MODE	vardef.h	24;"	d
NUM_OF_NODES	vardef.h	7;"	d
RECEIVER	vardef.h	20;"	d
RIGHT_ANTENNA	vardef.h	35;"	d
RS_DEFAULT	vardef.h	19;"	d
SENDER	vardef.h	21;"	d
Speed_Info	vardef.h	/^/;"	s
VARIABLE_DEFINE_H	vardef.h	2;"	d
WIDE_BEAM	vardef.h	15;"	d
X_speed	vardef.h	/^/;"	m	struct:Speed_Info
Y_speed	vardef.h	/^/;"	m	struct:Speed_Info
Z_speed	vardef.h	/^/;"	m	struct:Speed_Info
antenna_state	vardef.h	/^/;"	t	typeref:struct:Antenna_State
beam	vardef.h	/^/;"	m	struct:Antenna_State
connect	vardef.h	/^/;"	m	struct:Connect_Info
connect_	vardef.h	/^/;"	m	struct:Connect_Info_T
connect_info	vardef.h	/^/;"	t	typeref:struct:Connect_Info
connect_info_t	vardef.h	/^/;"	t	typeref:struct:Connect_Info_T
from_antenna	vardef.h	/^/;"	m	struct:Connect_Info
let_	vardef.h	/^/;"	m	struct:Connect_Info_T
mode	vardef.h	/^/;"	m	struct:Antenna_State
move_info	vardef.h	/^/;"	t	typeref:struct:Move_Info
recv_or_send	vardef.h	/^/;"	m	struct:Antenna_State
speed_info	vardef.h	/^/;"	t	typeref:struct:Speed_Info
x	vardef.h	/^/;"	m	struct:Move_Info
y	vardef.h	/^/;"	m	struct:Move_Info
z	vardef.h	/^/;"	m	struct:Move_Info
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
